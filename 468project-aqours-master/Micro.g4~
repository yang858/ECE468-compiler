/**
 * Define a grammar called Micro
 */
grammar Micro;
/* Program */
program
:
	'PROGRAM' id 'BEGIN' pgm_body 'END'
;

id
:
	IDENTIFIER
;

pgm_body
:
	{OverallSymbolTable.createGlobal();}

	decl func_declarations
;

decl
:
	string_decl decl
	| var_decl decl
	|
;

/* Global String Declaration */
string_decl
:
	'STRING' id ':=' str ';'
	{OverallSymbolTable.insertStack($id.text, "STRING", $str.text);}

;

str
:
	STRINGLITERAL
;

/* Variable Declaration */
var_decl
:
	var_type id_list ';'
	{OverallSymbolTable.insertStack($id_list.text, $var_type.text,"");}

;

var_type
:
	'FLOAT'
	| 'INT'
;

any_type
:
	var_type
	| 'VOID'
;

id_list
:
	id id_tail
;

id_tail
:
	',' id id_tail
	|
;

/* Function Parameter List */
param_decl_list
:
	param_decl param_decl_tail
	|
;

param_decl
:
	var_type id
	{OverallSymbolTable.insertStack($id.text, $var_type.text,"");}

;

param_decl_tail
:
	',' param_decl param_decl_tail
	|
;

/* Function Declarations */
func_declarations
:
	func_decl func_declarations
	|
;

func_decl
:
	'FUNCTION' any_type id
	{OverallSymbolTable.createFunction($id.text);}

	'(' param_decl_list ')' 'BEGIN' func_body 'END'
;

func_body
:
	decl
	//	{OverallSymbolTable.varTable.peek().printTable();}
	stmt_list
;

/* Statement List */
stmt_list
:
	stmt stmt_list
	|
;

stmt
:
	base_stmt
	| if_stmt
	| for_stmt
;

base_stmt
:
	assign_stmt
	| read_stmt
	| write_stmt
	| return_stmt
;

/* Basic Statements */
assign_stmt
:
	assign_expr ';'
;

assign_expr
:
	id ':=' expr
;

read_stmt
:
	'READ' '(' id_list ')' ';'
;

write_stmt
:
	'WRITE' '(' id_list ')' ';'
;

return_stmt
:
	'RETURN' expr ';'
;

/* Expressions */
expr
:
	expr_prefix factor
;

expr_prefix
:
	expr_prefix factor addop
	|
;

factor
:
	factor_prefix postfix_expr
;

factor_prefix
:
	factor_prefix postfix_expr mulop
	|
;

postfix_expr
:
	primary
	| call_expr
;

call_expr
:
	id '(' expr_list ')'
;

expr_list
:
	expr expr_list_tail
	|
;

expr_list_tail
:
	',' expr expr_list_tail
	|
;

primary
:
	'(' expr ')'
	| id
	| INTLITERAL
	| FLOATLITERAL
;

addop
:
	'+'
	| '-'
;

mulop
:
	'*'
	| '/'
;

/* Complex Statements and Condition */
if_stmt
:
	'IF' '(' cond ')'
	{OverallSymbolTable.createStatementBlock();}

	decl stmt_list else_part 'FI'
;

else_part
:
	'ELSE'
	{OverallSymbolTable.createStatementBlock();}

	decl stmt_list
	|
;

cond
:
	expr compop expr
	| 'TRUE'
	| 'FALSE'
;

for_stmt
:
	'FOR' '(' init_stmt ';' cond ';' incr_stmt ')' decl stmt_list 'ROF'
;

compop
:
	'<'
	| '>'
	| '='
	| '!='
	| '<='
	| '>='
;

init_stmt
:
	assign_expr
	|
;

incr_stmt
:
	assign_expr
	|
;

INTLITERAL
:
	[0-9]+
; // match floating point number available in two different format

FLOATLITERAL
:
	[0-9]* '.' [0-9]+
; // match

STRINGLITERAL
:
	(
		'"'
	)
	(
		~( '"' )*
	)
	(
		'"'
	)
; // match any sequence of characters except '"' between '"' and '"' ex) "Hello world!" , "***********" , "this is a string"

COMMENT
:
	(
		'--'
		(
			~( '\n' | '\r' )
		)+
	) -> skip
; // match the sentence : Starts with "--" and lasts till the end of line

Keywords
:
	'PROGRAM'
	| 'BEGIN'
	| 'END'
	| 'FUNCTION'
	| 'READ'
	| 'WRITE'
	| 'IF'
	| 'ELSE'
	| 'FI'
	| 'FOR'
	| 'ROF'
	| 'RETURN'
	| 'INT'
	| 'VOID'
	| 'STRING'
	| 'FLOAT'
	| 'TRUE'
	| 'FALSE'
; // match Keywords

OPERATOR
:
	':='
	| '+'
	| '-'
	| '*'
	| '/'
	| '='
	| '!='
	| '<'
	| '>'
	| '('
	| ')'
	| ';'
	| ','
	| '<='
	| '>='
; // match Operators

IDENTIFIER
:
	[A-Za-z] [A-Za-z0-9]*
; //an IDENTIFIER token will begin with a letter, and be followed by any number of letters and numbers.

WS
:
	[\t\r\n' ']+ -> skip
;